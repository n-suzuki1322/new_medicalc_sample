{"ast":null,"code":"var _jsxFileName = \"/Users/nobuhirosuzuki/Documents/Studying/react/new_medicalc/src/components/parts/Example.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, memo } from \"react\"; // この関数コンポーネントでmemoを書かなかったら、\n// count1の値が変化してもrenderingされてしまう。\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Child = /*#__PURE__*/React.memo(_c = props => {\n  console.log(\"render Child\");\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: props.handleClick,\n    children: \"Child\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 10\n  }, this);\n});\n_c2 = Child;\nexport default function Ex() {\n  _s();\n\n  console.log(\"render App\");\n  const [count, setCount] = useState(0); // 関数はコンポーネントが再レンダリングされる度に再生成されるため、\n  // 関数の内容が同じでも、新しい handleClick と前回の handleClick は\n  // 異なるオブジェクトなので、等価ではない。\n  // そのため、コンポーネントが再レンダリングされる。\n\n  const handleClick = () => {\n    console.log(\"click\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Counter: \", count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount(count + 1),\n      children: \"Increment count\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Child, {\n      handleClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(Ex, \"oDgYfYHkD9Wkv4hrAPCkI/ev3YU=\");\n\n_c3 = Ex;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Child$React.memo\");\n$RefreshReg$(_c2, \"Child\");\n$RefreshReg$(_c3, \"Ex\");","map":{"version":3,"sources":["/Users/nobuhirosuzuki/Documents/Studying/react/new_medicalc/src/components/parts/Example.jsx"],"names":["React","useState","memo","Child","props","console","log","handleClick","Ex","count","setCount"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,IAA1B,QAAsC,OAAtC,C,CAGA;AACA;;;;AACA,MAAMC,KAAK,gBAAGH,KAAK,CAACE,IAAN,MAAWE,KAAK,IAAI;AAChCC,EAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACA,sBAAO;AAAQ,IAAA,OAAO,EAAEF,KAAK,CAACG,WAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAHa,CAAd;MAAMJ,K;AAKN,eAAe,SAASK,EAAT,GAAc;AAAA;;AAC3BH,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAEA,QAAM,CAACG,KAAD,EAAQC,QAAR,IAAoBT,QAAQ,CAAC,CAAD,CAAlC,CAH2B,CAI3B;AACA;AACA;AACA;;AACA,QAAMM,WAAW,GAAG,MAAM;AACxBF,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,GAFD;;AAIA,sBACE;AAAA,4BACE;AAAA,8BAAaG,KAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAG,CAAT,CAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,KAAD;AAAO,MAAA,WAAW,EAAEF;AAApB;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA,kBADF;AAOD;;GAnBuBC,E;;MAAAA,E","sourcesContent":["import React, { useState, memo } from \"react\";\n\n\n// この関数コンポーネントでmemoを書かなかったら、\n// count1の値が変化してもrenderingされてしまう。\nconst Child = React.memo(props => {\n  console.log(\"render Child\");\n  return <button onClick={props.handleClick}>Child</button>;\n});\n\nexport default function Ex() {\n  console.log(\"render App\");\n\n  const [count, setCount] = useState(0);\n  // 関数はコンポーネントが再レンダリングされる度に再生成されるため、\n  // 関数の内容が同じでも、新しい handleClick と前回の handleClick は\n  // 異なるオブジェクトなので、等価ではない。\n  // そのため、コンポーネントが再レンダリングされる。\n  const handleClick = () => {\n    console.log(\"click\");\n  };\n\n  return (\n    <>\n      <p>Counter: {count}</p>\n      <button onClick={() => setCount(count + 1)}>Increment count</button>\n      <Child handleClick={handleClick} />\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}