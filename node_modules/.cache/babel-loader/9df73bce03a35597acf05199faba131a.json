{"ast":null,"code":"var _jsxFileName = \"/Users/nobuhirosuzuki/Documents/Studying/react/new_medicalc/src/components/parts/Example.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  console.log(\"render App\");\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0); // 引数の数値を２倍にして返す。\n  // 無駄なループを実行しているため計算にかなりの時間がかかる。\n\n  const double = count => {\n    let i = 0;\n\n    while (i < 1000000000) i++;\n\n    return count * 2;\n  }; // レンダリング結果（計算結果）をメモ化する\n  // 第２引数に count2 を渡しているため、count2 が更新された時だけ再レンダリングされる。\n  // count1 が更新され、コンポーネントが再レンダリングされた時はメモ化したレンダリング結果を\n  // 利用するため再レンダリングされない。\n\n\n  const Counter = useMemo(() => {\n    console.log(\"render Counter\");\n    const doubledCount = double(count2);\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Counter: \", count2, \", \", doubledCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }, [count2]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Increment count1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Counter: \", count1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount1(count1 + 1),\n      children: \"Increment count1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Increment count2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), Counter, /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount2(count2 + 1),\n      children: \"Increment count2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"maS0VFBvnfvWJpZrNEmwnMTs9Lc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nobuhirosuzuki/Documents/Studying/react/new_medicalc/src/components/parts/Example.jsx"],"names":["React","useState","useMemo","App","console","log","count1","setCount1","count2","setCount2","double","count","i","Counter","doubledCount"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,OAA1B,QAAyC,OAAzC;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACO,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,CAAD,CAApC,CAH4B,CAK5B;AACA;;AACA,QAAMS,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAG,UAAX,EAAuBA,CAAC;;AACxB,WAAOD,KAAK,GAAG,CAAf;AACD,GAJD,CAP4B,CAa5B;AACA;AACA;AACA;;;AACA,QAAME,OAAO,GAAGX,OAAO,CAAC,MAAM;AAC5BE,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ;AACA,UAAMS,YAAY,GAAGJ,MAAM,CAACF,MAAD,CAA3B;AAEA,wBACE;AAAA,8BACYA,MADZ,QACsBM,YADtB;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAKD,GATsB,EASpB,CAACN,MAAD,CAToB,CAAvB;AAWA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BAAaF,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAMC,SAAS,CAACD,MAAM,GAAG,CAAV,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,EAMGO,OANH,eAOE;AAAQ,MAAA,OAAO,EAAE,MAAMJ,SAAS,CAACD,MAAM,GAAG,CAAV,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA,kBADF;AAWD;;GAvCuBL,G;;KAAAA,G","sourcesContent":["import React, { useState, useMemo } from \"react\";\n\nexport default function App() {\n  console.log(\"render App\");\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  // 引数の数値を２倍にして返す。\n  // 無駄なループを実行しているため計算にかなりの時間がかかる。\n  const double = count => {\n    let i = 0;\n    while (i < 1000000000) i++;\n    return count * 2;\n  };\n\n  // レンダリング結果（計算結果）をメモ化する\n  // 第２引数に count2 を渡しているため、count2 が更新された時だけ再レンダリングされる。\n  // count1 が更新され、コンポーネントが再レンダリングされた時はメモ化したレンダリング結果を\n  // 利用するため再レンダリングされない。\n  const Counter = useMemo(() => {\n    console.log(\"render Counter\");\n    const doubledCount = double(count2);\n\n    return (\n      <p>\n        Counter: {count2}, {doubledCount}\n      </p>\n    );\n  }, [count2]);\n\n  return (\n    <>\n      <h2>Increment count1</h2>\n      <p>Counter: {count1}</p>\n      <button onClick={() => setCount1(count1 + 1)}>Increment count1</button>\n\n      <h2>Increment count2</h2>\n      {Counter}\n      <button onClick={() => setCount2(count2 + 1)}>Increment count2</button>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}