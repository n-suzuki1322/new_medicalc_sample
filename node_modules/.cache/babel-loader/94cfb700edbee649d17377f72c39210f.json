{"ast":null,"code":"var _jsxFileName = \"/Users/nobuhirosuzuki/Documents/Studying/react/new_medicalc/src/components/parts/Example.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  const double = count => {\n    let i = 0;\n\n    while (i < 1000000000) i++;\n\n    return count * 2;\n  }; // count2 を２倍にした値をメモ化する。\n  // 第２引数に count2 を渡しているため、count2 が更新された時だけ値が再計算される。\n  // count1 が更新され、コンポーネントが再レンダリングされた時はメモ化した値を利用するため再計算されない。\n\n\n  const doubledCount = useMemo(() => double(count2), [count2]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Increment(fast)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Counter: \", count1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount1(count1 + 1),\n      children: \"Increment(fast)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Increment(slow)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Counter: \", count2, \", \", doubledCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount2(count2 + 1),\n      children: \"Increment(slow)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"AvgX2Mzi9O8hwvUscCJt0yNBw0Y=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nobuhirosuzuki/Documents/Studying/react/new_medicalc/src/components/parts/Example.jsx"],"names":["React","useState","App","count1","setCount1","count2","setCount2","double","count","i","doubledCount","useMemo"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBH,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACI,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,CAAD,CAApC;;AAEA,QAAMM,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAG,UAAX,EAAuBA,CAAC;;AACxB,WAAOD,KAAK,GAAG,CAAf;AACD,GAJD,CAJ4B,CAU5B;AACA;AACA;;;AACA,QAAME,YAAY,GAAGC,OAAO,CAAC,MAAMJ,MAAM,CAACF,MAAD,CAAb,EAAuB,CAACA,MAAD,CAAvB,CAA5B;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BAAaF,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAMC,SAAS,CAACD,MAAM,GAAG,CAAV,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAA,8BACYE,MADZ,QACsBK,YADtB;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eASE;AAAQ,MAAA,OAAO,EAAE,MAAMJ,SAAS,CAACD,MAAM,GAAG,CAAV,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAaD;;GA5BuBH,G;;KAAAA,G","sourcesContent":["import React, { useState } from \"react\";\n\nexport default function App() {\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  const double = count => {\n    let i = 0;\n    while (i < 1000000000) i++;\n    return count * 2;\n  };\n\n  // count2 を２倍にした値をメモ化する。\n  // 第２引数に count2 を渡しているため、count2 が更新された時だけ値が再計算される。\n  // count1 が更新され、コンポーネントが再レンダリングされた時はメモ化した値を利用するため再計算されない。\n  const doubledCount = useMemo(() => double(count2), [count2]);\n\n  return (\n    <>\n      <h2>Increment(fast)</h2>\n      <p>Counter: {count1}</p>\n      <button onClick={() => setCount1(count1 + 1)}>Increment(fast)</button>\n\n      <h2>Increment(slow)</h2>\n      <p>\n        Counter: {count2}, {doubledCount}\n      </p>\n      <button onClick={() => setCount2(count2 + 1)}>Increment(slow)</button>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}