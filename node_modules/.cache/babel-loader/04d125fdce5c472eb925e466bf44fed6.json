{"ast":null,"code":"var _jsxFileName = \"/Users/nobuhirosuzuki/Documents/Studying/react/new_medicalc/src/components/parts/Example.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, memo, useCallback } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0); // 引数の数値を２倍にして返す。\n  // 不要なループを実行しているため計算にかなりの時間がかかる。\n\n  const double = count => {\n    let i = 0;\n\n    while (i < 1000000000) i++;\n\n    return count * 2;\n  }; // count2 を２倍にした値\n  // double(count2) はコンポーネントが再レンダリングされる度に実行されるため、\n  // count1 を更新してコンポーネントが再レンダリングされた時にも実行されてしまう。\n  // そのため、count1 を更新してコンポーネントを再レンダリングする時も時間がかかる。\n  // count1 を更新しても doubledCount の値は変わらないため、count1 を更新した時に\n  // double(count2) を実行する意味がない。したがって、不要な再計算が発生している状態である。\n  // count1 が更新されてコンポーネントが再レンダリングされた時は double(count2) が実行されないようにしたい。\n\n\n  const doubledCount = double(count2);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Increment count1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Counter: \", count1]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount1(count1 + 1),\n      children: \"Increment count1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Increment count2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Counter: \", count2, \", \", doubledCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setCount2(count2 + 1),\n      children: \"Increment count2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"Au8fyW5wzjHClKn3HRlUVv4pnjI=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/nobuhirosuzuki/Documents/Studying/react/new_medicalc/src/components/parts/Example.jsx"],"names":["React","useState","memo","useCallback","App","count1","setCount1","count2","setCount2","double","count","i","doubledCount"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,IAA1B,EAAgCC,WAAhC,QAAmD,OAAnD;;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC5B,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBL,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAACM,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC,CAAD,CAApC,CAF4B,CAI5B;AACA;;AACA,QAAMQ,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAIC,CAAC,GAAG,CAAR;;AACA,WAAOA,CAAC,GAAG,UAAX,EAAuBA,CAAC;;AACxB,WAAOD,KAAK,GAAG,CAAf;AACD,GAJD,CAN4B,CAY5B;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,QAAME,YAAY,GAAGH,MAAM,CAACF,MAAD,CAA3B;AAEA,sBACE;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA,8BAAaF,MAAb;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAQ,MAAA,OAAO,EAAE,MAAMC,SAAS,CAACD,MAAM,GAAG,CAAV,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAME;AAAA,8BACYE,MADZ,QACsBK,YADtB;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eASE;AAAQ,MAAA,OAAO,EAAE,MAAMJ,SAAS,CAACD,MAAM,GAAG,CAAV,CAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAaD;;GAlCuBH,G;;KAAAA,G","sourcesContent":["import React, { useState, memo, useCallback } from \"react\";\n\nexport default function App() {\n  const [count1, setCount1] = useState(0);\n  const [count2, setCount2] = useState(0);\n\n  // 引数の数値を２倍にして返す。\n  // 不要なループを実行しているため計算にかなりの時間がかかる。\n  const double = count => {\n    let i = 0;\n    while (i < 1000000000) i++;\n    return count * 2;\n  };\n\n  // count2 を２倍にした値\n  // double(count2) はコンポーネントが再レンダリングされる度に実行されるため、\n  // count1 を更新してコンポーネントが再レンダリングされた時にも実行されてしまう。\n  // そのため、count1 を更新してコンポーネントを再レンダリングする時も時間がかかる。\n  // count1 を更新しても doubledCount の値は変わらないため、count1 を更新した時に\n  // double(count2) を実行する意味がない。したがって、不要な再計算が発生している状態である。\n  // count1 が更新されてコンポーネントが再レンダリングされた時は double(count2) が実行されないようにしたい。\n  const doubledCount = double(count2);\n\n  return (\n    <>\n      <h2>Increment count1</h2>\n      <p>Counter: {count1}</p>\n      <button onClick={() => setCount1(count1 + 1)}>Increment count1</button>\n\n      <h2>Increment count2</h2>\n      <p>\n        Counter: {count2}, {doubledCount}\n      </p>\n      <button onClick={() => setCount2(count2 + 1)}>Increment count2</button>\n    </>\n  );\n}"]},"metadata":{},"sourceType":"module"}